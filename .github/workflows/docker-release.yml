name: Build and Push Docker Image on Release

on:
  workflow_dispatch:
  release:
    types: [published]

jobs:
  build-and-push-binary:
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Go ${{ matrix.go-version }}
        uses: actions/setup-go@v5
        with:
          go-version: 1.24
      - name: Create vendor and tar ball
        run: |
          go mod vendor
          tar --exclude .git -cJf kowalski-${{ github.ref_name }}.tar.xz *
      - name: Upload vendored tar ball
        uses: xresloader/upload-to-github-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          file: kowalski-${{ github.ref_name }}.tar.xz
          overwrite: true
          update_latest_release: true

      - name: Set Image Name and Tags
        id: image_info
        run: |
          IMAGE_NAME=${{ github.repository_owner }}/kowalski-binary
          IMAGE_TAG_SHA=${{ github.sha }}
          IMAGE_TAG_LATEST=latest
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_OUTPUT
          echo "IMAGE_TAG_SHA=$IMAGE_TAG_SHA" >> $GITHUB_OUTPUT
          echo "IMAGE_TAG_LATEST=$IMAGE_TAG_LATEST" >> $GITHUB_OUTPUT

      - name: Build Image with Buildah
        id: build_image
        uses: redhat-actions/buildah-build@v2
        with:
          containerfiles: Dockerfile.binary
          image: ${{ steps.image_info.outputs.image_name }}
          tags: |
            ${{ steps.image_info.outputs.image_tag_sha }}
            ${{ steps.image_info.outputs.image_tag_latest }}

      - name: Push to GHCR
        id: push
        uses: redhat-actions/push-to-registry@v2
        with:
          image: ${{ steps.image_info.outputs.image_name }}
          tags: |
            ${{ steps.image_info.outputs.image_tag_sha }}
            ${{ steps.image_info.outputs.image_tag_latest }}
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Image details
        if: steps.push.outputs.digest
        run: |
          echo "Image: ${{ steps.push.outputs.image }}"
          echo "Tags: ${{ steps.push.outputs.tags }}"
          echo "Digest: ${{ steps.push.outputs.digest }}"
          echo "Full Output: ${{ toJSON(steps.push.outputs) }}"
  build-and-publish-db:
    runs-on: ubuntu-latest
    permissions: write-all
    needs: build-and-push-binary
    steps:
      - name: Create ollama network
        run: docker network create ollama-net
      - name: Run ollama service
        run: |
          docker run -d \
            --name ollama --network ollama-net \
            -p 11434:11434 \
            ollama/ollama:latest
      - name: Clone external repo
        run:  |
          git clone --depth 1 https://github.com/SUSE/doc-sle /tmp/suseDocRepo
      - name: Run kowalski-binary container
        run: |
          find /tmp/suseDocRepo -type f -name "*.xml" | xargs \
          docker run \
            --name kowalski-container \
            --network ollama-net \
            -v /tmp/suseDocRepo:/tmp/suseDocRepo \
            -v /tmp/suseDoc:/suseDoc \
            -e KW_URL=http://ollama:11434/ \
            --link ollama:ollama \
            ghcr.io/${{ steps.image_info.outputs.image_name }}:${{ steps.image_info.outputs.image_tag_sha }} \
            database add
      - name: Create archive of /suseDoc
        run: |
         tar -C /tmp -czvf /tmp/suseDoc.tar.gz suseDoc
      - name: Upload /suseDoc as asset
        uses: xresloader/upload-to-github-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          file: /tmp/suseDoc.tar.gz
          overwrite: true
          update_latest_release: true
  build-with-db:
    runs-on: ubuntu-latest
    permissions: write-all
    needs: [build-and-push-binary,build-and-push-db]
    steps:
      - name: Set Image Name and Tags
        id: image_info
        run: |
          IMAGE_NAME=${{ github.repository_owner }}/kowalski
          IMAGE_TAG_SHA=${{ github.sha }}
          IMAGE_TAG_LATEST=latest
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_OUTPUT
          echo "IMAGE_TAG_SHA=$IMAGE_TAG_SHA" >> $GITHUB_OUTPUT
          echo "IMAGE_TAG_LATEST=$IMAGE_TAG_LATEST" >> $GITHUB_OUTPUT

      - name: Build Image with Buildah
        id: build_image
        uses: redhat-actions/buildah-build@v2
        with:
          containerfiles: Dockerfile
          image: ${{ steps.image_info.outputs.image_name }}
          tags: |
            ${{ steps.image_info.outputs.image_tag_sha }}
            ${{ steps.image_info.outputs.image_tag_latest }}

      - name: Push to GHCR
        id: push
        uses: redhat-actions/push-to-registry@v2
        with:
          image: ${{ steps.image_info.outputs.image_name }}
          tags: |
            ${{ steps.image_info.outputs.image_tag_sha }}
            ${{ steps.image_info.outputs.image_tag_latest }}
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Image details
        if: steps.push.outputs.digest
        run: |
          echo "Image: ${{ steps.push.outputs.image }}"
          echo "Tags: ${{ steps.push.outputs.tags }}"
          echo "Digest: ${{ steps.push.outputs.digest }}"
          echo "Full Output: ${{ toJSON(steps.push.outputs) }}"
